from rest_framework import serializers
from vehicles.models import Vehicle
from vehicles.models import Security
from vehicles.models import Fuel
from vehicles.models import Battery
from vehicles.models import Engine
# class VehicleSerializer(serializers.Serializer):
#     vin = serializers.CharField(required=True, allow_blank=False, max_length=100)
#     color = serializers.CharField(required=True, allow_blank=False, max_length=100)
#     fourDoorSedan = serializers.BooleanField(required=True)
#     twoDoorCoupe = serializers.BooleanField(required=True)
#     driveTrain = serializers.CharField(required=True, allow_blank=False, max_length=100)

class VehicleSerializer(serializers.ModelSerializer):
    #    doors = SecuritySerializer.StringRelatedField(many=True, read_only=True)
    class Meta:
        model = Vehicle
        fields = ('vid', 'vin', 'color', 'doorCount', 'driveTrain')
        #        exclude = ('vid',)
    # def create(self, validated_data):
    #     """
    #     Create and return a new `Vehicle` instance, given the validated data.
    #     """
    #     return Vehicle.objects.create(**validated_data)

    # def update(self, instance, validated_data):
    #     """
    #     Update and return an existing `Vehicle` instance, given the validated data.
    #     """
    #     instance.vin = validated_data.get('vin', instance.vin)
    #     instance.color = validated_data.get('color', instance.color)
    #     instance.fourDoorSedan = validated_data.get('fourDoorSedan', instance.fourDoorSeda)
    #     instance.twoDoorCoupe = validated_data.get('twoDoorCoupe', instance.twoDoorCoupe)
    #     instance.driveTrain = validated_data.get('driveTrain', instance.driveTrain)
    #     instance.save()
    #     return instance

class SecuritySerializer(serializers.ModelSerializer):
    class Meta:
        #queryset = Book.objects.all()
       # vehicle = VehicleSerializer(read_only=False)
        model = Security
        fields = ('location', 'locked', 'vehicle')
   # location = serializers.CharField(max_length=100)
   # lock = serializers.BooleanField(default=True)
  #  queryset = Security.objects.all()
 #   seclist = list(queryset)
#    serializer = SecuritySerializer(seclist, many=True)
   # serializer.data

   # def create(self, validated_data):
    #    return Comment.objects.create(**validated_data)
        # [
        #     {'id': 0, 'title': 'The electric kool-aid acid test', 'author': 'Tom Wolfe'},
        #     {'id': 1, 'title': 'If this is a man', 'author': 'Primo Levi'},
        #     {'id': 2, 'title': 'The wind-up bird chronicle', 'author': 'Haruki Murakami'}
        # ]
#class VehicleSerializer(serializers.ModelSerializer):
#    doors = SecuritySerializer(many=True, read_only=True)
 #   class Meta:
  #      model = Vehicle
   #     fields = ('vid', 'vin', 'color', 'doorCount', 'driveTrain')

    # def create(self, validated_data):
    #     doors_data = validated_data.pop('doors')
    #     vehicle = Vehicle.objects.create(**validated_data)
    #     for door_data in doors_data:
    #         Security.objects.create(vehicle=vehicle, **door_data)
    #     return vehicle

class FuelSerializer(serializers.ModelSerializer):
    class Meta:
        model = Fuel
        fields = ('percent', 'vehicle')

class BatterySerializer(serializers.ModelSerializer):
    class Meta:
        model = Battery
        fields = ('percent', 'vehicle')
        

class requestEngineSerializer(serializers.ModelSerializer):
    class Meta:
        model = Engine
        fields = ('action', 'vehicle')

class responseEngineSerializer(serializers.ModelSerializer):
    class Meta:
        model = Engine
        fields = ('status', 'vehicle')



